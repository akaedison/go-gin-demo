// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: nsfw.proto

package nsfw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClassifyClient is the client API for Classify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassifyClient interface {
	ClassifyImage(ctx context.Context, in *ClassifyRequest, opts ...grpc.CallOption) (*ClassifyReply, error)
}

type classifyClient struct {
	cc grpc.ClientConnInterface
}

func NewClassifyClient(cc grpc.ClientConnInterface) ClassifyClient {
	return &classifyClient{cc}
}

func (c *classifyClient) ClassifyImage(ctx context.Context, in *ClassifyRequest, opts ...grpc.CallOption) (*ClassifyReply, error) {
	out := new(ClassifyReply)
	err := c.cc.Invoke(ctx, "/nsfw.Classify/ClassifyImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassifyServer is the server API for Classify service.
// All implementations must embed UnimplementedClassifyServer
// for forward compatibility
type ClassifyServer interface {
	ClassifyImage(context.Context, *ClassifyRequest) (*ClassifyReply, error)
	mustEmbedUnimplementedClassifyServer()
}

// UnimplementedClassifyServer must be embedded to have forward compatible implementations.
type UnimplementedClassifyServer struct {
}

func (UnimplementedClassifyServer) ClassifyImage(context.Context, *ClassifyRequest) (*ClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyImage not implemented")
}
func (UnimplementedClassifyServer) mustEmbedUnimplementedClassifyServer() {}

// UnsafeClassifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassifyServer will
// result in compilation errors.
type UnsafeClassifyServer interface {
	mustEmbedUnimplementedClassifyServer()
}

func RegisterClassifyServer(s grpc.ServiceRegistrar, srv ClassifyServer) {
	s.RegisterService(&Classify_ServiceDesc, srv)
}

func _Classify_ClassifyImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassifyServer).ClassifyImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsfw.Classify/ClassifyImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassifyServer).ClassifyImage(ctx, req.(*ClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Classify_ServiceDesc is the grpc.ServiceDesc for Classify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Classify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nsfw.Classify",
	HandlerType: (*ClassifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClassifyImage",
			Handler:    _Classify_ClassifyImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nsfw.proto",
}
